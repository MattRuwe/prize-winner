@page "/"
@page "/join/{SessionId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using QRCoder
@using System.Drawing
@using System.Drawing.Imaging
@using PrizeWinner.Hubs
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Prize Winner</PageTitle>
@{
    switch (_currentView)
    {
        case CurrentView.NotJoined:
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-5 fw-bold">Prize Winner</h1>
                <div class="col-lg-6 mx-auto">
                    <p class="lead mb-4">Easily enroll and select winners during your events!</p>
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <div class="form-group">
                            <button class="btn btn-primary btn-lg px-4 gap-3" @onclick="() => _currentView = CurrentView.Creating">Let's Get Started</button>
                        </div>
                    </div>
                </div>
            </div>


            break;
        case CurrentView.Creating:
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-5 fw-bold">Create a new session</h1>
                <div class="col-lg-6 mx-auto">
                    <p class="lead mb-4">Create a new session so your group can join.</p>
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <div class="form-group">
                            <button class="btn btn-primary btn-lg px-4 gap-3" @onclick="CreateSession">Create Session</button>
                        </div>
                    </div>
                </div>
            </div>
            break;
        case CurrentView.Joining:
            <div class="px-4 py-5 my-5 text-center">
                <h3 class="fw-bold">Join a session by entering your name:</h3>
                <div class="col-lg-6 mx-auto">
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <div class="form-group">
                            <label class="lead">
                                Your Name:
                                <input @bind="_enteredUserName" />
                                <button class="btn btn-primary btn-lg px-4 gap-3" @onclick="() => JoinSession(_enteredUserName)">Join Session</button>
                            </label>
                        </div>
                    </div>
                </div>
            </div>



            break;
        case CurrentView.SessionJoined:
            <div class="px-4 py-5 my-5 text-center">
                <div class="col-lg-6 mx-auto">
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <p class="lead mb-4">You've been entered with the name: @_currentUser?.UserName</p>
                    </div>
                    @if (Winner?.ConnectionId == hubConnection?.ConnectionId)
                    {
                        <div class="col-lg-6 mx-auto">
                            <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                                <h1>You are the winner!</h1>
                            </div>
                        </div>
                    }
                </div>
            </div>



            break;
        case CurrentView.SelectingWinner:

            <div class="container">
                <div class="row justify-content-lg-center">
                    <div class="col-lg-auto">
                        <h2>Scan QR code to join.</h2>
                    </div>
                </div>
                <div class="row justify-content-lg-center">
                    <div class="col-lg-auto">
                        <img alt="" src="@_qrCode" width="300" />
                    </div>
                </div>
                <div class="row justify-content-lg-center">
                    <div class="col-lg-auto">
                        <a href="/join/@SessionId">Join Here</a>
                    </div>
                </div>
                <div class="row justify-content-lg-center">
                    <div class="col-lg-auto">
                        <button class="btn btn-primary btn-lg px-4 gap-3" @onclick="SelectWinner" disabled="@(_session.GetEligibleUsers().Count == 0)">Show Winner</button>
                    </div>
                </div>
                <div class="row justify-content-lg-center">
                    <div class="col-lg-auto">
                        <h1>@Winner?.UserName</h1>
                    </div>
                </div>
                <div class="row justify-content-lg-center">
                    <div class="col-lg-auto">
                        <ul class="list-group">
                            @foreach (var user in _session.GetEligibleUsers())
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center@(user.ConnectionId == Winner?.ConnectionId ? " list-group-item-success" : _session.Winners.Any(w => w.ConnectionId == user.ConnectionId) ? " disabled" : "")">@user.UserName</li>
                            }
                        </ul>
                    </div>
                </div>

                <div class="row justify-content-lg-center">
                </div>
            </div>


            break;
    }
}


@code {

    enum CurrentView
    {
        NotJoined,
        Joining,
        Creating,
        SessionJoined,
        SelectingWinner
    }

    private CurrentView _currentView;

    private string? _qrCode;
    private string? _enteredUserName;
    private bool _isHost = false;
    private User? Winner;
    private User? _currentUser;

    [Parameter]
    public string? SessionId { get; set; }

    private HubConnection? hubConnection;
    private Session _session;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/prizewinnerhub"))
            .Build();

        hubConnection.On<Session>("SessionStarted", SessionStarted);
        hubConnection.On<Session>("UserJoined", UserJoined);
        hubConnection.On<Session, User>("UserLeft", UserLeft);
        hubConnection.On<Session, User>("WinnerSelected", WinnerSelected);

        await hubConnection.StartAsync();

        if (string.IsNullOrWhiteSpace(SessionId))
        {
            _isHost = true;
            _currentView = CurrentView.NotJoined;
        }
        else
        {
            _currentView = CurrentView.Joining;
        }
    }

    private void WinnerSelected(Session session, User winner)
    {
        _session = session;
        Winner = winner;

        if (winner.ConnectionId == hubConnection.ConnectionId)
        {
            //This user is the winner

        }


        InvokeAsync(StateHasChanged);
    }

    private void UserLeft(Session session, User user)
    {
        if (Winner?.ConnectionId == user.ConnectionId)
        {
            Winner = null;
        }
        _session = session;
        InvokeAsync(StateHasChanged);
    }

    private void UserJoined(Session session)
    {
        _session = session;


        if (!_isHost)
        {
            _currentView = CurrentView.SessionJoined;
            //This is the current user
            _currentUser = session.Users.SingleOrDefault(u => u.ConnectionId == hubConnection.ConnectionId);
        }
        InvokeAsync(StateHasChanged);
    }

    private void SessionStarted(Session session)
    {
        _session = session;
        using MemoryStream ms = new();
        QRCodeGenerator qrCodeGenerate = new();
        var url = Navigation.ToAbsoluteUri($"/join/{session.SessionId}").ToString();
        QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode(url, QRCodeGenerator.ECCLevel.Q);
        QRCode qrCode = new(qrCodeData);
        using Bitmap qrBitMap = qrCode.GetGraphic(20);
        qrBitMap.Save(ms, ImageFormat.Png);
        string base64 = Convert.ToBase64String(ms.ToArray());
        _qrCode = $"data:image/png;base64,{base64}";


        SessionId = session.SessionId;
        _currentView = CurrentView.SelectingWinner;
        InvokeAsync(StateHasChanged);
    }

    private async Task CreateSession()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateSession");
        }
    }

    private async Task JoinSession(string sessionId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinSession", SessionId, _enteredUserName);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task SelectWinner()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SelectWinner");
        }
    }
}