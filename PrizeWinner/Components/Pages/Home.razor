@page "/"
@page "/join/{SessionId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using QRCoder
@using System.Drawing
@using System.Drawing.Imaging
@using PrizeWinner.Hubs
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Prize Winner</PageTitle>

@* <p>Current State = @_currentView</p> *@

@* <p>SessionId = @SessionId</p> *@

@{
    switch (_currentView)
    {
        case CurrentView.NotJoined:
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-5 fw-bold">Prize Winner</h1>
                <div class="col-lg-6 mx-auto">
                    <p class="lead mb-4">Easily enroll and select winners during your events!</p>
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <div class="form-group">
                            <button class="btn btn-primary btn-lg px-4 gap-3" @onclick="() => _currentView = CurrentView.Creating">Create</button>
                        </div>
                    </div>
                </div>
            </div>


            break;
        case CurrentView.Creating:
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-5 fw-bold">Create a new session</h1>
                <div class="col-lg-6 mx-auto">
                    <p class="lead mb-4">Create a new session so your group can join.</p>
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <div class="form-group">
                            <button class="btn btn-primary btn-lg px-4 gap-3" @onclick="CreateSession">Create Session</button>
                        </div>
                    </div>
                </div>
            </div>
            break;
        case CurrentView.Joining:
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-5 fw-bold">Create a new session</h1>
                <div class="col-lg-6 mx-auto">
                    <p class="lead mb-4">Join a session by entering your name:</p>
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <div class="form-group">
                            <label>
                                Your Name:
                                <input @bind="_enteredUserName" />
                                <button @onclick="() => JoinSession(_enteredUserName)">Join Session</button>
                            </label>
                        </div>
                    </div>
                </div>
            </div>



            break;
        case CurrentView.SessionJoined:
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-5 fw-bold">Create a new session</h1>
                <div class="col-lg-6 mx-auto">
                    <p class="lead mb-4">Join a session by entering your name:</p>
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <p>You've been entered with the name: @_currentUser?.UserName</p>
                        @if (Winner?.ConnectionId == hubConnection?.ConnectionId)
                        {
                            <h1>You are the winner!</h1>
                        }
                    </div>
                </div>
            </div>



            break;
        case CurrentView.SelectingWinner:
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-5 fw-bold">Create a new session</h1>
                <div class="col-lg-6 mx-auto">
                    <p class="lead mb-4">Join a session by entering your name:</p>
                    <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                        <div>
                            <p>Scan this QR code to join.</p>
                            <img alt="" src="@_qrCode" width="300" class="mb-5" />

                            <a href="/join/@SessionId">Join Here</a>
                            <ul>
                                @foreach (var user in _users)
                                {
                                    if (!user.IsHost)
                                    {
                                        <li>@user.UserName</li>
                                    }
                                }
                            </ul>
                            <button @onclick="SelectWinner">Show Winner</button>
                            <h1>@Winner?.UserName</h1>
                        </div>
                    </div>
                </div>
            </div>


            break;
    }
}

@code {

    enum CurrentView
    {
        NotJoined,
        Joining,
        Creating,
        SessionJoined,
        SelectingWinner
    }

    private CurrentView _currentView;

    private string? _qrCode;
    private string? _enteredUserName;
    private bool _isHost = false;
    private User? Winner;
    private User? _currentUser;

    [Parameter]
    public string? SessionId { get; set; }

    private HubConnection? hubConnection;
    private readonly List<User> _users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/prizewinnerhub"))
            .Build();

        hubConnection.On<string>("SessionStarted", SessionStarted);
        hubConnection.On<User>("UserJoined", UserJoined);
        hubConnection.On<User>("UserLeft", UserLeft);
        hubConnection.On<User>("WinnerSelected", WinnerSelected);

        await hubConnection.StartAsync();

        if (string.IsNullOrWhiteSpace(SessionId))
        {
            _isHost = true;
            _currentView = CurrentView.NotJoined;
        }
        else
        {
            _currentView = CurrentView.Joining;
        }
    }

    private void WinnerSelected(User winner)
    {
        Winner = winner;

        if (winner.ConnectionId == hubConnection.ConnectionId)
        {
            //This user is the winner

        }


        InvokeAsync(StateHasChanged);
    }

    private void UserLeft(User user)
    {
        var userToRemove = _users.FirstOrDefault(u => u.ConnectionId == user.ConnectionId);
        if (userToRemove is not null)
        {
            _users.Remove(userToRemove);
        }
        InvokeAsync(StateHasChanged);
    }

    private void UserJoined(User user)
    {
        _users.Add(user);
        if (!_isHost)
            _currentView = CurrentView.SessionJoined;

        if (!_isHost && hubConnection.ConnectionId == user.ConnectionId)
        {
            //This is the current user
            _currentUser = user;
        }
        InvokeAsync(StateHasChanged);
    }

    private void SessionStarted(string sessionId)
    {
        using MemoryStream ms = new();
        QRCodeGenerator qrCodeGenerate = new();
        var url = Navigation.ToAbsoluteUri($"/join/{sessionId}").ToString();
        QRCodeData qrCodeData = qrCodeGenerate.CreateQrCode(url, QRCodeGenerator.ECCLevel.Q);
        QRCode qrCode = new(qrCodeData);
        using Bitmap qrBitMap = qrCode.GetGraphic(20);
        qrBitMap.Save(ms, ImageFormat.Png);
        string base64 = Convert.ToBase64String(ms.ToArray());
        _qrCode = $"data:image/png;base64,{base64}";


        SessionId = sessionId;
        _currentView = CurrentView.SelectingWinner;
        InvokeAsync(StateHasChanged);
    }

    private async Task CreateSession()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateSession");
        }
    }

    private async Task JoinSession(string sessionId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinSession", SessionId, _enteredUserName);
        }
    }



    // private async Task Send()
    // {
    //     if (hubConnection is not null)
    //     {
    //         await hubConnection.SendAsync("SendMessage", userInput, messageInput);
    //     }
    // }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task SelectWinner()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SelectWinner");
        }
        //
        // Winner = _users.MinBy(u => Guid.NewGuid());
    }

}